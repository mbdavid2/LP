////////////////////////////////ONESTEP//////////////////////////////////////

let eLET = Func "Append" [Func "Cons" [LET "x" (Num 3) (Func "+" [Var "x", (Num 5)]), Func "Empty" []], Func "Empty" []]


let e24 = Func "Append" [Func "Cons" [Func "+" [(Num 3), (Num 5)], Func "Empty" []], Func "Empty" []]
oneStep (Prog [[]]) (Func "Append" [Func "Cons" [Func "+" [(Num 3), (Num 5)], Func "Empty" []], Func "Empty" []])


SUMA:
let e24 = Func "Append" [Func "Cons" [Func "+" [(Num 3), (Num 5)], Func "Empty" []], Func "Empty" []]
*Main> oneStep (Prog [[]]) e24
Result: Func "Append" [Func "Cons" [Num 8,Func "Empty" []],Func "Empty" []]

NOT:
let e24 = Func "Append" [Func "not"[Func "False" [], Func "Empty" []], Func "Empty" []]


let das = LET "x" (Num 3) (Func "+" [Var "x", (Num 5)])



match:

let exm1 = Func "Append" [Func "Cons" [Var "x", Var "l1"], Var "l2"]
let ne1 = LET "x" (Num 3) (LET "y" (Num 5) (Func "+" [Var "x", Var "y"]))
let exm2 = Func "Append" [Func "Cons" [Num 3, Func "Empty" []], Func "Empty" []]
let prog1 = Prog [[(exm1,ne1),(exm2,ne1)]]


oneStep definitiu:

let e11 = Func "Append" [Func "Empty" [],Var "l"]
let e12 = Var "l"
let e21 = Func "Append" [Func "Cons" [Var "x", Var "l1"], Var "l2"]
let e22 = LET "m" (Func "Append" [Var "l1", Var "l2"]) (Func "Cons" [Var "x", Var "m"])
let prog1 = Prog [[(e11,e12),(e21,e22)]]

let ne1 = LET "x" (Num 3) (LET "y" (Num 5) (Func "+" [Var "x", Var "y"]))
let final = (Func "Append" [Func "Cons" [ne1, Func "Empty" []], Func "Empty" []])

oneStep prog1 (Func "Append" [Func "Cons" [ne1, Func "Empty" []], Func "Empty" []])
oneStep prog1 $ oneStep prog1 $ oneStep prog1 $ oneStep prog1 final
let prog2 = Prog [[(e21,e22)]]
let stop = oneStep prog1 $ oneStep prog1 $ oneStep prog1 $ oneStep prog1 final
let stop2 = oneStep prog2 $ oneStep prog2 $ oneStep prog2 $ oneStep prog2 final


let current = Func "Append" [Func "Cons" [Num 8, Func "Empty" []], Func "Empty" []]
let listout = [("x",Num 8),("l1",Func "Empty" []),("l2",Func "Empty" [])]


let current = Func "Append" [Func "Cons" [Num 8, Func "Empty" []], Func "Empty" []]
let e11 = Func "Append" [Func "Empty" [],Var "l"]


let maaa = (Func "Append" [Func "Empty" [],Var "l"])
let asasa = Func "Append" [Func "Cons" [Num 8,Func "Empty" []],Func "Empty" []]


let ellet = LET "m" (Func "Append" [Func "Empty" [],Func "Empty" []]) (Func "Cons" [Num 8,Var "m"])

let solo = (Func "Append" [Func "Empty" [],Func "Empty" []])

oneStep prog1 $ oneStep prog1 $ oneStep prog1 current



let e11 = Func "Append" [Func "Empty" [],Var "l"]
let e12 = Var "l"
let e21 = Func "Append" [Func "Cons" [Var "x", Var "l1"], Var "l2"]
let e22 = LET "m" (Func "Append" [Var "l1", Var "l2"]) (Func "Cons" [Var "x", Var "m"])
let prog1 = Prog [[(e11,e12),(e21,e22)]]
let ne1 = LET "x" (Num 3) (LET "y" (Num 5) (Func "+" [Var "x", Var "y"]))
let final = (Func "Append" [Func "Cons" [ne1, Func "Empty" []], Func "Empty" []])
let current = Func "Append" [Func "Cons" [Num 8, Func "Empty" []], Func "Empty" []]
let starto = Func "Append" [Func "Cons" [LET "x" (Num 3) (Func "+" [Var "x", (Num 5)]), Func "Empty" []], Func "Empty" []]
oneStep prog1 starto
/////GIUSEPE//////
let prova = (Func "TPM" [Func "holita" [], Func "+" [Num 2, Num 3], Num 3])



//////////////////WELLTYPED/////////////////////
let e11 = Func "Append" [Func "Empty" [],Var "l"]
let e12 = Var "l"
let e21 = Func "Append" [Func "Cons" [Var "x", Var "l1"], Var "l2"]
let e22 = LET "m" (Func "Append" [Var "l1", Var "l2"]) (Func "Cons" [Var "x", Var "m"])
let prog1 = Prog [[(e11,e12),(e21,e22)]]
let ne1 = LET "x" (Num 3) (LET "y" (Num 5) (Func "+" [Var "x", Var "y"]))

let e22 = buildTree $ transform $ (LET "m" (Func "Append" [Var "l1", Var "l2"]) (Func "Cons" [Var "x", Var "m"]))
let tP = transformProgram prog1
let tT = transform e22

buildTree $ transform (LET "m" (Func "Append" [Var "l1", Var "l2"]) (Func "Cons" [Var "x", Var "m"]))
buildTree $ transform $ ((Func "Append" [Var "l1", Var "l2"]))
buildTree $ transform $ (Func "Cons" [Var "x", Var "m"])
buildTree $ transform $ (LET "x" (Num 5) (Func "+" [Var "x", Var "y"]))




let e11 = Func "Append" [Func "Empty" [],Var "l"]
let e12 = Var "l"
let e21 = Func "Append" [Func "Cons" [Var "x", Var "l1"], Var "l2"]
let e22 = LET "m" (Func "Append" [Var "l1", Var "l2"]) (Func "Cons" [Var "x", Var "m"])
let prog1 = Prog [[(e11,e12),(e21,e22)]]
wellTyped $ transformProgram prog1

let e11 = Func "Append" [Func "Empty" [], Num x]
