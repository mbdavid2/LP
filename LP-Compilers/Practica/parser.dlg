<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: practica.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "pcctscfg.h"
#include "pccts_stdio.h"

#include <string>
#include <iostream>
using namespace std;

// struct to store information about tokens
typedef struct {
  string kind;
  string text;
} Attrib;

// function to fill token information (predeclaration)
void zzcr_attr(Attrib *attr, int type, char *text);

// fields for AST nodes
#define AST_FIELDS string kind; string text;
#include "ast.h"

// macro to create a new AST node (and function predeclaration)
#define zzcr_ast(as,attr,ttype,textt) as=createASTnode(attr,ttype,textt)
AST* createASTnode(Attrib* attr, int ttype, char *textt);
#include "antlr.h"
#include "ast.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD

void
#ifdef __USE_PROTOS
zzerraction(void)
#else
zzerraction()
#endif
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>


%%START

@
	<<
		NLA = 1;
	>>

[0-9]+
	<<
		NLA = NUM;
	>>

\+
	<<
		NLA = PLUS;
	>>

\-
	<<
		NLA = MINUS;
	>>

\*
	<<
		NLA = PROD;
	>>

\#
	<<
		NLA = CONCAT;
	>>

=
	<<
		NLA = ASIG;
	>>

flatten
	<<
		NLA = FLATTEN;
	>>

pop
	<<
		NLA = POP;
	>>

print
	<<
		NLA = PRINT;
	>>

head
	<<
		NLA = HEAD;
	>>

lreduce
	<<
		NLA = LREDUCE;
	>>

lmap
	<<
		NLA = LMAP;
	>>

lfilter
	<<
		NLA = LFILTER;
	>>

\]
	<<
		NLA = EMPTYLIST;
	>>

\==
	<<
		NLA = EQ;
	>>

\!=
	<<
		NLA = DIF;
	>>

\>
	<<
		NLA = GT;
	>>

\<
	<<
		NLA = LT;
	>>

\>=
	<<
		NLA = GTE;
	>>

\<=
	<<
		NLA = LTE;
	>>

empty
	<<
		NLA = EMPTY;
	>>

and
	<<
		NLA = AND;
	>>

or
	<<
		NLA = OR;
	>>

not
	<<
		NLA = NOT;
	>>

if
	<<
		NLA = IF;
	>>

then
	<<
		NLA = THEN;
	>>

endif
	<<
		NLA = ENDIF;
	>>

while
	<<
		NLA = WHILE;
	>>

do
	<<
		NLA = DO;
	>>

endwhile
	<<
		NLA = ENDWHILE;
	>>

[a-zA-Z][a-zA-Z0-9]*
	<<
		NLA = LID;
	>>

[\ \n]
	<<
		NLA = SPACE;
    zzskip();  
	>>

\(
	<<
		NLA = 34;
	>>

\)
	<<
		NLA = 35;
	>>

\[
	<<
		NLA = 36;
	>>

\,
	<<
		NLA = 37;
	>>

%%
