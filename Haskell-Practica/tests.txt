Term1:

    let c1 = ((LET "x" (Num 5) (Func "+" [Var "y", Var "x"])))

    let cc = Func "+" [Var "y", c1]

    let e22 = LET "m" (Func "Append" [Var "l1", Var "l2"]) (Func "Cons" [Var "x", Var "m"])

    let eaa = ITE e22 cc c1

Term2:

    let qewq = ((LET "qqq" (Var "y") (Func "+" [Var "qqq", Var "x"])))

    let c1B = LET "x" (Num 5) qewq

    let ccB = Func "+" [Var "y", c1B]

    let e22B = LET "q" (Func "Append" [Var "l1", Var "l2"]) (Func "Cons" [Var "x", Var "q"])

    let eaaB = ITE e22B ccB c1B

Result:

eaaB == eaa True

*Main> finalTerm eaa
ITE (Func "Cons" [Var "x",Func "Append" [Var "l1",Var "l2"]]) (Func "+" [Var "y",Func "+" [Var "y",Num 5]]) (Func "+" [Var "y",Num 5])

////////////////////////////////////////////////////////////////////////////////

let e11 = Func "Append" [Func "Empty" [],Var "l"]
let e12 = Var "l"
let e21 = Func "Append" [Func "Cons" [Var "x", Var "l1"], Var "l2"]
let e22 = LET "m" (Func "Append" [Var "l1", Var "l2"]) (Func "Cons" [Var "x", Var "m"])
let prog1 = Prog [[(e11,e12),(e21,e22)]]



////////////////////////////////MATCH//////////////////////////////////////

let m1 = (Func "Append" [Func "Cons" [Var "x", Var "l1"], Var "l2"])
let m2 = (Func "Append" [Func "Cons" [Num 3, Func "Empty" []], Func "Empty" []])
Expected: Just [("x",Num 3),("l1",Func "Empty" []),("l2",Func "Empty" [])]

let n1 = (Func "Paquito" [(Func "Cons" [(Var "x"), (Var "l1")]), (Var "l2")])
let n2 = (Func "Append" [(Func "Cons" [(Num 3), (Func "Empty" [])]), (Func "Empty" [])])
Expected: Nothing


////////////////////////////////ONESTEP//////////////////////////////////////

let eLET = Func "Append" [Func "Cons" [LET "x" (Num 3) (Func "+" [Var "x", (Num 5)]), Func "Empty" []], Func "Empty" []]


let e24 = Func "Append" [Func "Cons" [Func "+" [(Num 3), (Num 5)], Func "Empty" []], Func "Empty" []]
oneStep (Prog [[]]) (Func "Append" [Func "Cons" [Func "+" [(Num 3), (Num 5)], Func "Empty" []], Func "Empty" []])


SUMA:
let e24 = Func "Append" [Func "Cons" [Func "+" [(Num 3), (Num 5)], Func "Empty" []], Func "Empty" []]
*Main> oneStep (Prog [[]]) e24
Result: Func "Append" [Func "Cons" [Num 8,Func "Empty" []],Func "Empty" []]

NOT:
let e24 = Func "Append" [Func "not"[Func "False" [], Func "Empty" []], Func "Empty" []]


let das = LET "x" (Num 3) (Func "+" [Var "x", (Num 5)])



match:

let exm1 = Func "Append" [Func "Cons" [Var "x", Var "l1"], Var "l2"]
let ne1 = LET "x" (Num 3) (LET "y" (Num 5) (Func "+" [Var "x", Var "y"]))
let exm2 = Func "Append" [Func "Cons" [Num 3, Func "Empty" []], Func "Empty" []]
let prog1 = Prog [[(exm1,ne1),(exm2,ne1)]]


oneStep definitiu:

let e11 = Func "Append" [Func "Empty" [],Var "l"]
let e12 = Var "l"
let e21 = Func "Append" [Func "Cons" [Var "x", Var "l1"], Var "l2"]
let e22 = LET "m" (Func "Append" [Var "l1", Var "l2"]) (Func "Cons" [Var "x", Var "m"])
let prog1 = Prog [[(e11,e12),(e21,e22)]]

let ne1 = LET "x" (Num 3) (LET "y" (Num 5) (Func "+" [Var "x", Var "y"]))
let final = (Func "Append" [Func "Cons" [ne1, Func "Empty" []], Func "Empty" []])

oneStep prog1 (Func "Append" [Func "Cons" [ne1, Func "Empty" []], Func "Empty" []])
oneStep prog1 $ oneStep prog1 $ oneStep prog1 $ oneStep prog1 final
let prog2 = Prog [[(e21,e22)]]
let stop = oneStep prog1 $ oneStep prog1 $ oneStep prog1 $ oneStep prog1 final
let stop2 = oneStep prog2 $ oneStep prog2 $ oneStep prog2 $ oneStep prog2 final


let current = Func "Append" [Func "Cons" [Num 8, Func "Empty" []], Func "Empty" []]
let listout = [("x",Num 8),("l1",Func "Empty" []),("l2",Func "Empty" [])]


let current = Func "Append" [Func "Cons" [Num 8, Func "Empty" []], Func "Empty" []]
let e11 = Func "Append" [Func "Empty" [],Var "l"]


let maaa = (Func "Append" [Func "Empty" [],Var "l"])
let asasa = Func "Append" [Func "Cons" [Num 8,Func "Empty" []],Func "Empty" []]
